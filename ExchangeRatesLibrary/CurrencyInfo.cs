using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ExchangeRatesLibrary
{
    /// <summary> Readonly struct designed to store data of single currency in single time period </summary>
    public readonly struct CurrencyInfo
    {
        #region General properties
        /// <summary> ISO 4217 currency tag </summary>
        public readonly string currencyTag;
        /// <summary> starting time point of this data sample </summary>
        public readonly DateTime periodStartDate;
        /// <summary> end time point of this data sample </summary>
        public readonly DateTime periodEndDate;
        #endregion

        #region Buy price properties
        /// <summary> <b><i>Buy price</i></b> - average value in given time </summary>
        public readonly double averageBuyPrice;
        /// <summary> <b><i>Buy price</i></b> - maximal value in given time </summary>
        public readonly double maxBuyPrice;
        /// <summary> <b><i>Buy price</i></b> - minimal value in given time </summary>
        public readonly double minBuyPrice;
        /// <summary> <b><i>Buy price</i></b> - standard deviation value in given time </summary>
        public readonly double stdDevBuyPrice;
        /// <summary> <b><i>Buy price</i></b> - maximal value of exchange difference between two days in given time </summary>
        public readonly double biggestBuyExchangeDifference;
        /// <summary> <b><i>Buy price</i></b> - list of dates on which exchange difference was greatest in given time </summary>
        public readonly List<DateTime> biggestBuyExchangeDifferenceDates;
        #endregion

        #region Sell price properties
        /// <summary> <b><i>Sell price</i></b> - average value in given time </summary>
        public readonly double averageSellPrice;
        /// <summary> <b><i>Sell price</i></b> - maximal value in given time </summary>
        public readonly double maxSellPrice;
        /// <summary> <b><i>Sell price</i></b> - minimal value in given time </summary>
        public readonly double minSellPrice;
        /// <summary> <b><i>Sell price</i></b> - standard deviation value in given time </summary>
        public readonly double stdDevSellPrice;
        /// <summary> <b><i>Sell price</i></b> - maximal value of exchange difference between two days in given time </summary>
        public readonly double biggestSellExchangeDifference;
        /// <summary> <b><i>Sell price</i></b> - list of dates on which exchange difference was greatest in given time </summary>
        public readonly List<DateTime> biggestSellExchangeDifferenceDates;
        #endregion

        /// <summary>
        /// Constructor fo CurrencyInfo time.
        /// </summary>
        /// <param name="inputData"> Dictionary<DateTime, Tuple<double, double>> - should be generated by <i>DataObtainer.GetData</i> method to work properly. </param>
        /// <param name="currencyName"> ISO 4217 currency tag of currency from input </param>
        /// <exception cref="ArgumentNullException"> Thrown when input Dictionary is null </exception>
        /// <exception cref="ArgumentOutOfRangeException"> Thrown when input Dictionary is empty </exception>
        public CurrencyInfo(Dictionary<DateTime, Tuple<double, double>> inputData, string currencyName)
        {
            if (inputData is null) throw new ArgumentNullException(nameof(inputData));
            if (inputData.Count < 1) throw new ArgumentOutOfRangeException(nameof(inputData));

            currencyTag = currencyName.ToUpper();
            periodStartDate = inputData.Keys.First();
            periodEndDate = inputData.Keys.Last();

            #region data calculation

            averageBuyPrice = inputData.Values.Average(x => x.Item1);
            maxBuyPrice = inputData.Values.Max(x => x.Item1);
            minBuyPrice = inputData.Values.Min(x => x.Item1);
            stdDevBuyPrice = Utilities.StandardDeviation(inputData.Values.Select(x => x.Item1));
            biggestBuyExchangeDifferenceDates = new();
            biggestBuyExchangeDifference = 0;
            double tempDifferenceAbsoluteValue = 0;
            for (int i = 1; i < inputData.Keys.Count(); i++)
            {
                double tempResult = Math.Round(inputData.ElementAt(i).Value.Item1 - inputData.ElementAt(i - 1).Value.Item1, 4);
                if (Math.Abs(tempResult) > tempDifferenceAbsoluteValue)
                {
                    biggestBuyExchangeDifferenceDates.Clear();
                    biggestBuyExchangeDifference = tempResult;
                    tempDifferenceAbsoluteValue = Math.Abs(tempResult);
                    biggestBuyExchangeDifferenceDates.Add(inputData.ElementAt(i).Key);
                }
                else if (Math.Abs(tempResult) == tempDifferenceAbsoluteValue)
                    biggestBuyExchangeDifferenceDates.Add(inputData.ElementAt(i).Key);
            }

            averageSellPrice = inputData.Values.Average(x => x.Item2);
            maxSellPrice = inputData.Values.Max(x => x.Item2);
            minSellPrice = inputData.Values.Min(x => x.Item2);
            stdDevSellPrice = Utilities.StandardDeviation(inputData.Values.Select(x => x.Item2));
            biggestSellExchangeDifferenceDates = new();
            biggestSellExchangeDifference = 0;
            tempDifferenceAbsoluteValue = 0;
            for (int i = 1; i < inputData.Keys.Count(); i++)
            {
                double tempResult = Math.Round(inputData.ElementAt(i).Value.Item2 - inputData.ElementAt(i - 1).Value.Item2, 4);
                if (Math.Abs(tempResult) > tempDifferenceAbsoluteValue)
                {
                    biggestSellExchangeDifferenceDates.Clear();
                    biggestSellExchangeDifference = tempResult;
                    tempDifferenceAbsoluteValue = Math.Abs(tempResult);
                    biggestSellExchangeDifferenceDates.Add(inputData.ElementAt(i).Key);
                }
                else if (Math.Abs(tempResult) == tempDifferenceAbsoluteValue)
                    biggestSellExchangeDifferenceDates.Add(inputData.ElementAt(i).Key);
            }
            #endregion

        }
    }
}
